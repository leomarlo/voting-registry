/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "addCategoryToRegistration(bytes8)": FunctionFragment;
    "getNumberOfRegisteredCategories()": FunctionFragment;
    "getRegisteredCategoryFromIndex(uint256)": FunctionFragment;
    "getRegistrationIndex(address)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "isRegisteredCategory(bytes8)": FunctionFragment;
    "numberOfRegistrations()": FunctionFragment;
    "register(bytes8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCategoryToRegistration"
      | "getNumberOfRegisteredCategories"
      | "getRegisteredCategoryFromIndex"
      | "getRegistrationIndex"
      | "isRegistered"
      | "isRegisteredCategory"
      | "numberOfRegistrations"
      | "register"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCategoryToRegistration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfRegisteredCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredCategoryFromIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredCategory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRegistrations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "register", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "addCategoryToRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfRegisteredCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredCategoryFromIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRegistrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {};
}

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNumberOfRegisteredCategories(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegisteredCategoryFromIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isRegistered: boolean }>;

    isRegisteredCategory(
      category: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numberOfRegistrations(overrides?: CallOverrides): Promise<[BigNumber]>;

    register(
      _categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCategoryToRegistration(
    categoryId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNumberOfRegisteredCategories(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegisteredCategoryFromIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRegistrationIndex(
    votingContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isRegistered(
    votingContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredCategory(
    category: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numberOfRegistrations(overrides?: CallOverrides): Promise<BigNumber>;

  register(
    _categoryId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getNumberOfRegisteredCategories(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredCategoryFromIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredCategory(
      category: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numberOfRegistrations(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      _categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNumberOfRegisteredCategories(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredCategoryFromIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredCategory(
      category: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfRegistrations(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      _categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNumberOfRegisteredCategories(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredCategoryFromIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredCategory(
      category: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfRegistrations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
