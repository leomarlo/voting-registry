/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface VotingContractRegistrationInterface extends utils.Interface {
  functions: {
    "getRegistrationIndex(address)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "numberOfRegistrations()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getRegistrationIndex"
      | "isRegistered"
      | "numberOfRegistrations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRegistrationIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRegistrations",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getRegistrationIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRegistrations",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VotingContractRegistration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingContractRegistrationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isRegistered: boolean }>;

    numberOfRegistrations(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getRegistrationIndex(
    votingContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isRegistered(
    votingContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numberOfRegistrations(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numberOfRegistrations(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfRegistrations(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getRegistrationIndex(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      votingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfRegistrations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
