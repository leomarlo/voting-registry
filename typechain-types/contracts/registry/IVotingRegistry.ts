/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IVotingRegistryInterface extends utils.Interface {
  functions: {
    "addCategoryToRegistration(bytes8)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "isRegisteredCategory(bytes8)": FunctionFragment;
    "register(bytes8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCategoryToRegistration"
      | "isRegistered"
      | "isRegisteredCategory"
      | "register"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCategoryToRegistration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredCategory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "register", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "addCategoryToRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {};
}

export interface IVotingRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVotingRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRegistered(
      voteContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { registrationFlag: boolean }>;

    isRegisteredCategory(
      categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { registrationFlag: boolean }>;

    register(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCategoryToRegistration(
    categoryId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRegistered(
    voteContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredCategory(
    categoryId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  register(
    categoryId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegistered(
      voteContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredCategory(
      categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    register(
      categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRegistered(
      voteContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredCategory(
      categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCategoryToRegistration(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRegistered(
      voteContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredCategory(
      categoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      categoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
