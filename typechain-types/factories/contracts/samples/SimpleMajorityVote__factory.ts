/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SimpleMajorityVote,
  SimpleMajorityVoteInterface,
} from "../../../contracts/samples/SimpleMajorityVote";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "AlreadyVoted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "bytes8",
        name: "categoryId",
        type: "bytes8",
      },
    ],
    name: "MayOnlyRegisterOnceByDeployer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "voteIndex",
        type: "uint256",
      },
    ],
    name: "StatusPermitsVoting",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "categories",
    outputs: [
      {
        internalType: "bytes8",
        name: "",
        type: "bytes8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "votingParams",
        type: "bytes",
      },
    ],
    name: "decodeVotingParams",
    outputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "encodeVotingParams",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "getCurrentVoteIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "voteIndex",
        type: "uint256",
      },
    ],
    name: "getCurrentVotingStatus",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "categoryId",
        type: "bytes8",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "voteIndex",
        type: "uint256",
      },
    ],
    name: "result",
    outputs: [
      {
        internalType: "bytes32",
        name: "votingResult",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "votingParams",
        type: "bytes",
      },
    ],
    name: "start",
    outputs: [
      {
        internalType: "uint256",
        name: "voteIndex",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "voteIndex",
        type: "uint256",
      },
    ],
    name: "statusPermitsVoting",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "voteIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "option",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611497806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063475a7c4911610071578063475a7c491461018a5780634de8737c146101ba5780634f08c4ce146101ea57806379b848491461021a578063b7c112271461024a578063c6cdbe5e1461027a576100a9565b806301ffc9a7146100ae57806307a1018e146100de578063176cc99a1461010e5780633c5940591461013e5780634279182b1461016e575b600080fd5b6100c860048036038101906100c39190610e60565b6102aa565b6040516100d59190611085565b60405180910390f35b6100f860048036038101906100f39190610eb2565b610324565b60405161010591906110f8565b60405180910390f35b61012860048036038101906101239190610ef3565b610425565b60405161013591906110d6565b60405180910390f35b61015860048036038101906101539190610ef3565b61044e565b60405161016591906110a0565b60405180910390f35b61018860048036038101906101839190610e89565b6104ab565b005b6101a4600480360381019061019f9190610e37565b6105e9565b6040516101b191906110f8565b60405180910390f35b6101d460048036038101906101cf9190610f45565b610632565b6040516101e191906110f8565b60405180910390f35b61020460048036038101906101ff9190610eb2565b610971565b60405161021191906110f8565b60405180910390f35b610234600480360381019061022f9190610ef3565b61098e565b60405161024191906110f8565b60405180910390f35b610264600480360381019061025f9190610ef3565b6109e8565b6040516102719190611085565b60405180910390f35b610294600480360381019061028f9190610ef3565b6109fa565b6040516102a191906110bb565b60405180910390f35b60006102b582610a31565b8061031d57507fc1d1208c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60006001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103769190611219565b9250508190555061038682610b03565b90506003808111156103c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061040e336105e9565b815260200190815260200160002081905550919050565b60608160405160200161043891906110f8565b6040516020818303038152906040529050919050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205460001b9050919050565b6000808054905011156104f75733816040517fca3827140000000000000000000000000000000000000000000000000000000081526004016104ee929190611033565b60405180910390fd5b735354453d6fa8a3a285abe7b7b34dadc70ae1a2fc73ffffffffffffffffffffffffffffffffffffffff16634279182b826040518263ffffffff1660e01b815260040161054491906110bb565b602060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190610f1c565b5060008190806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908360c01c021790555050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008361063e81610b7d565b6106815733816040517f63f9165100000000000000000000000000000000000000000000000000000000815260040161067892919061105c565b60405180910390fd5b8484600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561076057806040517fd449d6740000000000000000000000000000000000000000000000000000000081526004016107579190611018565b60405180910390fd5b6001151561076d88610bdb565b151514156107d65761077e87610c37565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000205493506108c1565b60008514610804577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610807565b60015b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008282546108669190611185565b92505081905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000205493505b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050509392505050565b6000818060200190518101906109879190610f1c565b9050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050919050565b60006109f382610b7d565b9050919050565b60008181548110610a0a57600080fd5b9060005260206000209060049182820401919006600802915054906101000a900460c01b81565b60007fc1d1208c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610afc57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000610b0e336105e9565b9050610b1982610971565b42610b249190611219565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550919050565b60006003600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205410159050919050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205442119050919050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205414610cd15760016003811115610cc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff16610d0f565b60026003811115610d0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff165b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208190555050565b6000610d79610d7484611138565b611113565b905082815260208101848484011115610d9157600080fd5b610d9c848285611323565b509392505050565b600081359050610db381611405565b92915050565b600081359050610dc88161141c565b92915050565b600081359050610ddd81611433565b92915050565b600082601f830112610df457600080fd5b8135610e04848260208601610d66565b91505092915050565b600081359050610e1c8161144a565b92915050565b600081519050610e318161144a565b92915050565b600060208284031215610e4957600080fd5b6000610e5784828501610da4565b91505092915050565b600060208284031215610e7257600080fd5b6000610e8084828501610db9565b91505092915050565b600060208284031215610e9b57600080fd5b6000610ea984828501610dce565b91505092915050565b600060208284031215610ec457600080fd5b600082013567ffffffffffffffff811115610ede57600080fd5b610eea84828501610de3565b91505092915050565b600060208284031215610f0557600080fd5b6000610f1384828501610e0d565b91505092915050565b600060208284031215610f2e57600080fd5b6000610f3c84828501610e22565b91505092915050565b600080600060608486031215610f5a57600080fd5b6000610f6886828701610e0d565b9350506020610f7986828701610da4565b9250506040610f8a86828701610e0d565b9150509250925092565b610f9d8161126f565b82525050565b610fac81611281565b82525050565b610fbb8161128d565b82525050565b610fca816112c3565b82525050565b6000610fdb82611169565b610fe58185611174565b9350610ff5818560208601611332565b610ffe816113f4565b840191505092915050565b61101281611319565b82525050565b600060208201905061102d6000830184610f94565b92915050565b60006040820190506110486000830185610f94565b6110556020830184610fc1565b9392505050565b60006040820190506110716000830185610f94565b61107e6020830184611009565b9392505050565b600060208201905061109a6000830184610fa3565b92915050565b60006020820190506110b56000830184610fb2565b92915050565b60006020820190506110d06000830184610fc1565b92915050565b600060208201905081810360008301526110f08184610fd0565b905092915050565b600060208201905061110d6000830184611009565b92915050565b600061111d61112e565b90506111298282611365565b919050565b6000604051905090565b600067ffffffffffffffff821115611153576111526113c5565b5b61115c826113f4565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611190826112ef565b915061119b836112ef565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156111d6576111d5611396565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561120e5761120d611396565b5b828201905092915050565b600061122482611319565b915061122f83611319565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561126457611263611396565b5b828201905092915050565b600061127a826112f9565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611350578082015181840152602081019050611335565b8381111561135f576000848401525b50505050565b61136e826113f4565b810181811067ffffffffffffffff8211171561138d5761138c6113c5565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61140e8161126f565b811461141957600080fd5b50565b61142581611297565b811461143057600080fd5b50565b61143c816112c3565b811461144757600080fd5b50565b61145381611319565b811461145e57600080fd5b5056fea264697066735822122041c6641d192dc23e2dcf5a0cef2ae5810d8af8d508ff62c0757e364ac985803e64736f6c63430008040033";

type SimpleMajorityVoteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleMajorityVoteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleMajorityVote__factory extends ContractFactory {
  constructor(...args: SimpleMajorityVoteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimpleMajorityVote> {
    return super.deploy(overrides || {}) as Promise<SimpleMajorityVote>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleMajorityVote {
    return super.attach(address) as SimpleMajorityVote;
  }
  override connect(signer: Signer): SimpleMajorityVote__factory {
    return super.connect(signer) as SimpleMajorityVote__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleMajorityVoteInterface {
    return new utils.Interface(_abi) as SimpleMajorityVoteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleMajorityVote {
    return new Contract(address, _abi, signerOrProvider) as SimpleMajorityVote;
  }
}
