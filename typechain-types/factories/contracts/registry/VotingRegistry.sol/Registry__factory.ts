/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Registry,
  RegistryInterface,
} from "../../../../contracts/registry/VotingRegistry.sol/Registry";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "categoryId",
        type: "bytes8",
      },
    ],
    name: "addCategoryToRegistration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfRegisteredCategories",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getRegisteredCategoryFromIndex",
    outputs: [
      {
        internalType: "bytes8",
        name: "",
        type: "bytes8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "votingContract",
        type: "address",
      },
    ],
    name: "getRegistrationIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "votingContract",
        type: "address",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "category",
        type: "bytes8",
      },
    ],
    name: "isRegisteredCategory",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numberOfRegistrations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "_categoryId",
        type: "bytes8",
      },
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "registrationIndex",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b82806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639c4c4f8c1161005b5780639c4c4f8c14610139578063c3c5a54714610157578063d8f63eb714610187578063eedfc82b146101a557610088565b80631d50be2d1461008d5780634279182b146100bd57806366141f48146100ed5780638b5a57b514610109575b600080fd5b6100a760048036038101906100a291906107a5565b6101d5565b6040516100b491906108a9565b60405180910390f35b6100d760048036038101906100d2919061077c565b6101fe565b6040516100e49190610924565b60405180910390f35b6101076004803603810190610102919061077c565b6102a8565b005b610123600480360381019061011e919061072a565b6102fc565b6040516101309190610924565b60405180910390f35b610141610345565b60405161014e9190610924565b60405180910390f35b610171600480360381019061016c919061072a565b61034f565b60405161017e9190610873565b60405180910390f35b61018f61039a565b60405161019c9190610924565b60405180910390f35b6101bf60048036038101906101ba919061077c565b6103a4565b6040516101cc9190610873565b60405180910390f35b600080600083815260200190815260200160002060009054906101000a900460c01b9050919050565b60006102093361034f565b15610249576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610240906108c4565b60405180910390fd5b6102516103f9565b610290576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610287906108e4565b60405180910390fd5b6102986104a9565b90506102a382610513565b919050565b6102b13361034f565b6102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e790610904565b60405180910390fd5b6102f981610513565b50565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600254905090565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054119050919050565b6000600454905090565b600080600160008477ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054119050919050565b60003373ffffffffffffffffffffffffffffffffffffffff166301ffc9a77fc1d1208c000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610454919061088e565b60206040518083038186803b15801561046c57600080fd5b505afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610753565b905090565b60006001600460008282546104be9190610950565b92505081905550600454600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454905090565b8061051d816103a4565b61052b5761052a82610635565b5b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461057b9190610950565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060006101000a81548167ffffffffffffffff021916908360c01c02179055505050565b6001600260008282546106489190610950565b9250508190555080600080600254815260200190815260200160002060006101000a81548167ffffffffffffffff021916908360c01c0217905550600254600160008377ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555050565b6000813590506106e581610af0565b92915050565b6000815190506106fa81610b07565b92915050565b60008135905061070f81610b1e565b92915050565b60008135905061072481610b35565b92915050565b60006020828403121561073c57600080fd5b600061074a848285016106d6565b91505092915050565b60006020828403121561076557600080fd5b6000610773848285016106eb565b91505092915050565b60006020828403121561078e57600080fd5b600061079c84828501610700565b91505092915050565b6000602082840312156107b757600080fd5b60006107c584828501610715565b91505092915050565b6107d7816109b8565b82525050565b6107e6816109c4565b82525050565b6107f5816109f0565b82525050565b600061080860158361093f565b915061081382610a75565b602082019050919050565b600061082b601c8361093f565b915061083682610a9e565b602082019050919050565b600061084e60118361093f565b915061085982610ac7565b602082019050919050565b61086d81610a3c565b82525050565b600060208201905061088860008301846107ce565b92915050565b60006020820190506108a360008301846107dd565b92915050565b60006020820190506108be60008301846107ec565b92915050565b600060208201905081810360008301526108dd816107fb565b9050919050565b600060208201905081810360008301526108fd8161081e565b9050919050565b6000602082019050818103600083015261091d81610841565b9050919050565b60006020820190506109396000830184610864565b92915050565b600082825260208201905092915050565b600061095b82610a3c565b915061096683610a3c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561099b5761099a610a46565b5b828201905092915050565b60006109b182610a1c565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f6973206e6f742079657420726567697374657265640000000000000000000000600082015250565b7f646f6573206e6f7420696d706c656d656e7420696e7465726661636500000000600082015250565b7f6973206e6f742072656769737465726564000000000000000000000000000000600082015250565b610af9816109a6565b8114610b0457600080fd5b50565b610b10816109b8565b8114610b1b57600080fd5b50565b610b27816109f0565b8114610b3257600080fd5b50565b610b3e81610a3c565b8114610b4957600080fd5b5056fea26469706673582212206039df61398d74205bb41932457aa59483dc630244ef4680024951e6d383a0bb64736f6c63430008040033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Registry> {
    return super.deploy(overrides || {}) as Promise<Registry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  override connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}
