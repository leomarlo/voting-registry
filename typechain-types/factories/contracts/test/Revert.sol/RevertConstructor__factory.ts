/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RevertConstructor,
  RevertConstructorInterface,
} from "../../../../contracts/test/Revert.sol/RevertConstructor";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer",
        type: "address",
      },
    ],
    name: "ReversionOfConstructor",
    type: "error",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600115605157336040517f2c290246000000000000000000000000000000000000000000000000000000008152600401604891906062565b60405180910390fd5b60ab565b605c81607b565b82525050565b6000602082019050607560008301846055565b92915050565b6000608482608b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b603f8060b86000396000f3fe6080604052600080fdfea26469706673582212200d9ba3e2b9a7721387027d930d30b766c48c472f4c461681c40cc0890cadb5ad64736f6c63430008040033";

type RevertConstructorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevertConstructorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevertConstructor__factory extends ContractFactory {
  constructor(...args: RevertConstructorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RevertConstructor> {
    return super.deploy(overrides || {}) as Promise<RevertConstructor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RevertConstructor {
    return super.attach(address) as RevertConstructor;
  }
  override connect(signer: Signer): RevertConstructor__factory {
    return super.connect(signer) as RevertConstructor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevertConstructorInterface {
    return new utils.Interface(_abi) as RevertConstructorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevertConstructor {
    return new Contract(address, _abi, signerOrProvider) as RevertConstructor;
  }
}
