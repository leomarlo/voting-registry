/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "CanVote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CanVote__factory>;
    getContractFactory(
      name: "CanVotePrimitive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CanVotePrimitive__factory>;
    getContractFactory(
      name: "CanVoteWithoutStarting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CanVoteWithoutStarting__factory>;
    getContractFactory(
      name: "CanVoteAndDelegateImplement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CanVoteAndDelegateImplement__factory>;
    getContractFactory(
      name: "CanVoteAndImplement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CanVoteAndImplement__factory>;
    getContractFactory(
      name: "IVotingRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingRegistry__factory>;
    getContractFactory(
      name: "CategoryRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CategoryRegistration__factory>;
    getContractFactory(
      name: "Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registry__factory>;
    getContractFactory(
      name: "VotingContractRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingContractRegistration__factory>;
    getContractFactory(
      name: "SimpleMajorityVote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleMajorityVote__factory>;
    getContractFactory(
      name: "SimpleMajorityVoteAndImplement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleMajorityVoteAndImplement__factory>;
    getContractFactory(
      name: "ThresholdTokenVote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThresholdTokenVote__factory>;
    getContractFactory(
      name: "ThresholdTokenVoteAndImplement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThresholdTokenVoteAndImplement__factory>;
    getContractFactory(
      name: "DummyERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyERC20__factory>;
    getContractFactory(
      name: "IDummyERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDummyERC20__factory>;
    getContractFactory(
      name: "DummyIntegrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyIntegrator__factory>;
    getContractFactory(
      name: "RevertConstructor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertConstructor__factory>;
    getContractFactory(
      name: "RevertFunction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertFunction__factory>;
    getContractFactory(
      name: "IVoteAndImplementContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoteAndImplementContract__factory>;
    getContractFactory(
      name: "IVoteContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoteContract__factory>;
    getContractFactory(
      name: "RegisterVoteContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegisterVoteContract__factory>;
    getContractFactory(
      name: "VoteAndImplementContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteAndImplementContract__factory>;
    getContractFactory(
      name: "VoteContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteContract__factory>;
    getContractFactory(
      name: "VoteContractPrimitive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteContractPrimitive__factory>;
    getContractFactory(
      name: "VotingStatusHandling",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingStatusHandling__factory>;
    getContractFactory(
      name: "IGetCurrentIndex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGetCurrentIndex__factory>;
    getContractFactory(
      name: "IVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoting__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "CanVote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CanVote>;
    getContractAt(
      name: "CanVotePrimitive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CanVotePrimitive>;
    getContractAt(
      name: "CanVoteWithoutStarting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CanVoteWithoutStarting>;
    getContractAt(
      name: "CanVoteAndDelegateImplement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CanVoteAndDelegateImplement>;
    getContractAt(
      name: "CanVoteAndImplement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CanVoteAndImplement>;
    getContractAt(
      name: "IVotingRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingRegistry>;
    getContractAt(
      name: "CategoryRegistration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CategoryRegistration>;
    getContractAt(
      name: "Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Registry>;
    getContractAt(
      name: "VotingContractRegistration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingContractRegistration>;
    getContractAt(
      name: "SimpleMajorityVote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleMajorityVote>;
    getContractAt(
      name: "SimpleMajorityVoteAndImplement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleMajorityVoteAndImplement>;
    getContractAt(
      name: "ThresholdTokenVote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThresholdTokenVote>;
    getContractAt(
      name: "ThresholdTokenVoteAndImplement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThresholdTokenVoteAndImplement>;
    getContractAt(
      name: "DummyERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyERC20>;
    getContractAt(
      name: "IDummyERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDummyERC20>;
    getContractAt(
      name: "DummyIntegrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyIntegrator>;
    getContractAt(
      name: "RevertConstructor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertConstructor>;
    getContractAt(
      name: "RevertFunction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertFunction>;
    getContractAt(
      name: "IVoteAndImplementContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoteAndImplementContract>;
    getContractAt(
      name: "IVoteContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoteContract>;
    getContractAt(
      name: "RegisterVoteContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegisterVoteContract>;
    getContractAt(
      name: "VoteAndImplementContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteAndImplementContract>;
    getContractAt(
      name: "VoteContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteContract>;
    getContractAt(
      name: "VoteContractPrimitive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteContractPrimitive>;
    getContractAt(
      name: "VotingStatusHandling",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingStatusHandling>;
    getContractAt(
      name: "IGetCurrentIndex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGetCurrentIndex>;
    getContractAt(
      name: "IVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoting>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
