{
    "methods": {
        "approve(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function approve(address to, uint256 tokenId) external nonpayable",
            "inputs": {
                "to": {
                    "type": "address"
                },
                "tokenId": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
        },
        "balanceOf(address)": {
            "stateMutability": "view",
            "code": "function balanceOf(address owner) external view returns (uint256 balance)",
            "inputs": {
                "owner": {
                    "type": "address"
                }
            },
            "outputs": {
                "balance": {
                    "type": "uint256"
                }
            },
            "details": "Returns the number of tokens in ``owner``'s account."
        },
        "getApproved(uint256)": {
            "stateMutability": "view",
            "code": "function getApproved(uint256 tokenId) external view returns (address operator)",
            "inputs": {
                "tokenId": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "operator": {
                    "type": "address"
                }
            },
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "isApprovedForAll(address,address)": {
            "stateMutability": "view",
            "code": "function isApprovedForAll(address owner, address operator) external view returns (bool)",
            "inputs": {
                "owner": {
                    "type": "address"
                },
                "operator": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
        },
        "name()": {
            "stateMutability": "view",
            "code": "function name() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Returns the token collection name."
        },
        "ownerOf(uint256)": {
            "stateMutability": "view",
            "code": "function ownerOf(uint256 tokenId) external view returns (address owner)",
            "inputs": {
                "tokenId": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "owner": {
                    "type": "address"
                }
            },
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
        },
        "safeTransferFrom(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable",
            "inputs": {
                "from": {
                    "type": "address"
                },
                "to": {
                    "type": "address"
                },
                "tokenId": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
            "stateMutability": "nonpayable",
            "code": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable",
            "inputs": {
                "from": {
                    "type": "address"
                },
                "to": {
                    "type": "address"
                },
                "tokenId": {
                    "type": "uint256"
                },
                "data": {
                    "type": "bytes"
                }
            },
            "outputs": {},
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
        },
        "setApprovalForAll(address,bool)": {
            "stateMutability": "nonpayable",
            "code": "function setApprovalForAll(address operator, bool _approved) external nonpayable",
            "inputs": {
                "operator": {
                    "type": "address"
                },
                "_approved": {
                    "type": "bool"
                }
            },
            "outputs": {},
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
        },
        "supportsInterface(bytes4)": {
            "stateMutability": "view",
            "code": "function supportsInterface(bytes4 interfaceId) external view returns (bool)",
            "inputs": {
                "interfaceId": {
                    "type": "bytes4"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
        },
        "symbol()": {
            "stateMutability": "view",
            "code": "function symbol() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Returns the token collection symbol."
        },
        "tokenURI(uint256)": {
            "stateMutability": "view",
            "code": "function tokenURI(uint256 tokenId) external view returns (string)",
            "inputs": {
                "tokenId": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
        },
        "transferFrom(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function transferFrom(address from, address to, uint256 tokenId) external nonpayable",
            "inputs": {
                "from": {
                    "type": "address"
                },
                "to": {
                    "type": "address"
                },
                "tokenId": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
        }
    },
    "events": {
        "Approval": {
            "code": "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
            "inputs": {
                "owner": {
                    "type": "address",
                    "indexed": true
                },
                "approved": {
                    "type": "address",
                    "indexed": true
                },
                "tokenId": {
                    "type": "uint256",
                    "indexed": true
                }
            }
        },
        "ApprovalForAll": {
            "code": "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
            "inputs": {
                "owner": {
                    "type": "address",
                    "indexed": true
                },
                "operator": {
                    "type": "address",
                    "indexed": true
                },
                "approved": {
                    "type": "bool",
                    "indexed": false
                }
            }
        },
        "Transfer": {
            "code": "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
            "inputs": {
                "from": {
                    "type": "address",
                    "indexed": true
                },
                "to": {
                    "type": "address",
                    "indexed": true
                },
                "tokenId": {
                    "type": "uint256",
                    "indexed": true
                }
            }
        }
    },
    "errors": {},
    "path": "elin/contracts/token/ERC721/extensions",
    "title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
    "details": "See https://eips.ethereum.org/EIPS/eip-721",
    "name": "IERC721Metadata"
}